<!DOCTYPE html>
<html lang="tr">
<head>
    <title>Gelişmiş Vardiya Hesaplama Sistemi</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /*
         * GENEL STİLLER
         * - Sayfa genelinde tutarlı bir görünüm sağlar.
         */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
            padding: 20px;
        }
        
        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 25px;
            color: #2c3e50;
            font-size: 1.8rem;
            padding-bottom: 15px;
            border-bottom: 2px solid #eaeaea;
        }
        
        h2 {
            margin: 20px 0 15px;
            color: #2c3e50;
            font-size: 1.4rem;
        }
        
        /*
         * FORM STİLLERİ
         * - Form elemanlarının düzenini ve görünümünü iyileştirir.
         */
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-row {
            display: flex;
            gap: 20px;
        }
        
        .form-row .form-group {
            flex: 1;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
            font-size: 0.95rem;
        }
        
        input[type="date"], select {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s;
            background-color: #f9f9f9;
            -webkit-appearance: none;
        }
        
        input[type="date"]:focus, select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
        }
        
        button {
            width: 100%;
            background-color: #3498db;
            color: white;
            padding: 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1rem;
            font-weight: 600;
            transition: background-color 0.3s;
            margin-top: 10px;
            box-shadow: 0 4px 6px rgba(52, 152, 219, 0.2);
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        /*
         * SONUÇ VE BİLDİRİM STİLLERİ
         * - Hesaplama sonuçlarının ve hataların görünümünü düzenler.
         */
        .result {
            margin-top: 30px;
            padding: 20px;
            border-radius: 8px;
            background-color: #f9f9f9;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .result h2 {
            margin-bottom: 15px;
            color: #2c3e50;
            font-size: 1.4rem;
            text-align: center;
        }
        
        .result p {
            margin-bottom: 10px;
            font-size: 1.05rem;
        }
        
        .result strong {
            font-weight: 600;
            color: #34495e;
        }
        
        /*
         * VARDİYA VE TATİL RENKLERİ
         * - Vardiya tiplerine ve tatil günlerine özel renk kodlaması yapar.
         */
        .vardiya-1 { 
            color: #3498db; 
            font-weight: 600;
        }
        
        .vardiya-2 { 
            color: #2ecc71; 
            font-weight: 600;
        }
        
        .vardiya-3 { 
            color: #e74c3c; 
            font-weight: 600;
        }
        
        .tatil {
            color: #9b59b6;
            font-weight: 600;
        }
        
        /*
         * NAVİGASYON VE SEKME STİLLERİ
         * - Farklı hesaplama görünümleri (tek gün, takvim, aralık) arasındaki geçişi sağlar.
         */
        .tabs {
            display: flex;
            margin: 25px 0 15px;
            border-bottom: 1px solid #ddd;
            overflow-x: auto; /* Küçük ekranlarda kaydırma çubuğu ekler */
            white-space: nowrap;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
            background-color: #f2f2f2;
            flex-shrink: 0;
        }
        
        .tab.active {
            background-color: #fff;
            border-color: #ddd;
            margin-bottom: -1px;
            color: #3498db;
            font-weight: 600;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /*
         * TAKİP VE LİSTE GÖRÜNÜMLERİ
         * - Takvim ve tarih aralığı listesi için özel stiller.
         */
        .calendar {
            width: 100%;
            margin-top: 25px;
            border-collapse: collapse;
        }
        
        .calendar th, .calendar td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        
        .calendar th {
            background-color: #f2f2f2;
            font-weight: 600;
        }
        
        .calendar .today {
            background-color: #f8f1de;
            font-weight: 700;
        }
        
        .calendar td.tatil-gunu {
            background-color: #f0e6f6;
        }
        
        .date-range-view {
            margin-top: 25px;
        }
        
        .date-range-list {
            list-style: none;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .date-range-item {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .date-range-item:last-child {
            border-bottom: none;
        }
        
        .date-range-item:nth-child(odd) {
            background-color: #f9f9f9;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }
        
        .checkbox-group input {
            margin-right: 8px;
        }
        
        /*
         * RESPONSIVE DÜZEN
         * - Farklı ekran boyutlarına uyum sağlar.
         */
        @media screen and (min-width: 768px) {
            .container {
                max-width: 700px;
                padding: 30px;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            button {
                padding: 12px;
            }
        }
        
        @media screen and (max-width: 380px) {
            body {
                padding: 10px;
            }
            
            .container {
                padding: 15px;
            }
            
            h1 {
                font-size: 1.6rem;
            }
            
            input[type="date"], select {
                font-size: 16px; /* iPhone'da zum sorununu engeller */
            }
            
            .tab {
                padding: 8px 12px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Vardiya Hesaplama</h1>
        
        <form id="vardiya-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="baslangic_tarihi">Başlangıç Tarihi:</label>
                    <input type="date" id="baslangic_tarihi" name="baslangic_tarihi" required>
                </div>
                
                <div class="form-group">
                    <label for="baslangic_vardiya">Başlangıç Vardiyası:</label>
                    <select id="baslangic_vardiya" name="baslangic_vardiya" required>
                        <option value="1">1. Vardiya (00:00-08:00)</option>
                        <option value="2">2. Vardiya (08:00-16:00)</option>
                        <option value="3">3. Vardiya (16:00-24:00)</option>
                    </select>
                </div>
            </div>
            
            <div class="form-group">
                <label for="tatil_gunu">Tatil Günü:</label>
                <select id="tatil_gunu" name="tatil_gunu" required>
                    <option value="1">Pazartesi</option>
                    <option value="2">Salı</option>
                    <option value="3">Çarşamba</option>
                    <option value="4">Perşembe</option>
                    <option value="5" selected>Cuma</option>
                    <option value="6">Cumartesi</option>
                    <option value="0">Pazar</option>
                </select>
            </div>
            
            <div class="tabs">
                <div class="tab active" onclick="showTab('gun-hesapla', event)">Gün Hesapla</div>
                <div class="tab" onclick="showTab('aylik-takvim', event)">Aylık Takvim</div>
                <div class="tab" onclick="showTab('tarih-araligi', event)">Tarih Aralığı</div>
            </div>
            
            <div id="gun-hesapla" class="tab-content active">
                <div class="form-group">
                    <label for="hedef_tarih">Vardiyasını Öğrenmek İstediğiniz Tarih:</label>
                    <input type="date" id="hedef_tarih" name="hedef_tarih" required>
                </div>
                
                <button type="button" onclick="calculateShift()">Vardiyayı Hesapla</button>
            </div>
            
            <div id="aylik-takvim" class="tab-content">
                <div class="form-group">
                    <label for="takvim_ay">Ay Seçin:</label>
                    <input type="month" id="takvim_ay" name="takvim_ay" required>
                </div>
                
                <button type="button" onclick="showMonthlyCalendar()">Aylık Takvimi Göster</button>
            </div>
            
            <div id="tarih-araligi" class="tab-content">
                <div class="form-row">
                    <div class="form-group">
                        <label for="baslangic_aralik">Başlangıç Tarihi:</label>
                        <input type="date" id="baslangic_aralik" name="baslangic_aralik" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="bitis_aralik">Bitiş Tarihi:</label>
                        <input type="date" id="bitis_aralik" name="bitis_aralik" required>
                    </div>
                </div>
                
                <div class="checkbox-group">
                    <input type="checkbox" id="tatil_gunleri" name="tatil_gunleri">
                    <label for="tatil_gunleri">Tatil günlerini de göster</label>
                </div>
                
                <button type="button" onclick="showDateRange()">Tarih Aralığını Göster</button>
            </div>
        </form>
        
        <div id="result-container">
            </div>
    </div>
    
    <script>
        // Vardiya adları ve gün adları tanımları
        const VARDİYA_ADLARI = {
            1: "1. Vardiya (00:00-08:00)",
            2: "2. Vardiya (08:00-16:00)",
            3: "3. Vardiya (16:00-24:00)"
        };
        
        const GUN_ADLARI = [
            "Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"
        ];
        
        /**
         * Verilen bir tarih için vardiya bilgisini hesaplar.
         * @param {Date} startDate Referans başlangıç tarihi.
         * @param {number} startShift Başlangıç tarihi için vardiya numarası (1, 2 veya 3).
         * @param {number} holidayDay Haftanın tatil günü (0: Pazar, 6: Cumartesi).
         * @param {Date} targetDate Vardiyası öğrenilmek istenen tarih.
         * @returns {{shift: (number|null), status: string, error: (string|null)}} Vardiya bilgisi veya hata mesajı.
         */
        function getShiftForDate(startDate, startShift, holidayDay, targetDate) {
            if (targetDate < startDate) {
                return { shift: null, status: 'error', error: 'Hedef tarih, başlangıç tarihinden önce olamaz.' };
            }
            
            const targetDay = targetDate.getDay(); // 0 (Pazar) - 6 (Cumartesi)
            if (targetDay === holidayDay) {
                return { shift: null, status: 'tatil', error: null };
            }
            
            const diffInDays = Math.floor((targetDate - startDate) / (1000 * 60 * 60 * 24));
            
            let holidayCount = 0;
            let currentDate = new Date(startDate);
            for (let i = 0; i < diffInDays; i++) {
                if (currentDate.getDay() === holidayDay) {
                    holidayCount++;
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }
            
            const workingDays = diffInDays - holidayCount;
            
            const shiftOrder = [1, 3, 2, 1, 3, 2];
            const startIndex = shiftOrder.indexOf(startShift);
            
            let finalShiftIndex = (startIndex + workingDays) % 3;
            if (finalShiftIndex < 0) {
                finalShiftIndex += 3;
            }
            
            const finalShift = shiftOrder[finalShiftIndex];
            
            return { shift: finalShift, status: 'calisma', error: null };
        }
        
        /**
         * Tek bir gün için vardiya hesaplaması yapar ve sonucu gösterir.
         */
        function calculateShift() {
            const startDate = new Date(document.getElementById('baslangic_tarihi').value);
            const startShift = parseInt(document.getElementById('baslangic_vardiya').value);
            const holidayDay = parseInt(document.getElementById('tatil_gunu').value);
            const targetDate = new Date(document.getElementById('hedef_tarih').value);
            
            const result = getShiftForDate(startDate, startShift, holidayDay, targetDate);
            
            let html = '';
            if (result.status === 'error') {
                html = `<div class="result"><h2>Hata!</h2><p>${result.error}</p></div>`;
            } else {
                const targetDayName = GUN_ADLARI[targetDate.getDay()];
                html = `<div class="result">
                            <h2>Vardiya Bilgisi</h2>
                            <p><strong>Tarih:</strong> ${targetDate.toLocaleDateString('tr-TR')}</p>
                            <p><strong>Gün:</strong> ${targetDayName}</p>`;
                if (result.status === 'tatil') {
                    html += `<p><strong>Durum:</strong> <span class="tatil">TATİL GÜNÜ</span></p>`;
                } else {
                    const shiftClass = `vardiya-${result.shift}`;
                    const shiftName = VARDİYA_ADLARI[result.shift];
                    html += `<p><strong>Vardiya:</strong> <span class="${shiftClass}">${shiftName}</span></p>`;
                }
                html += `</div>`;
            }
            
            document.getElementById('result-container').innerHTML = html;
        }
        
        /**
         * Seçilen ay için aylık vardiya takvimini oluşturur ve gösterir.
         */
        function showMonthlyCalendar() {
            const startDate = new Date(document.getElementById('baslangic_tarihi').value);
            const startShift = parseInt(document.getElementById('baslangic_vardiya').value);
            const holidayDay = parseInt(document.getElementById('tatil_gunu').value);
            const monthInput = document.getElementById('takvim_ay').value;
            
            if (!monthInput) {
                alert('Lütfen bir ay seçin.');
                return;
            }
            
            const [year, month] = monthInput.split('-');
            const firstDayOfMonth = new Date(year, month - 1, 1);
            const lastDayOfMonth = new Date(year, month, 0);
            
            let html = `<div class="result">
                            <h2>${firstDayOfMonth.toLocaleDateString('tr-TR', { year: 'numeric', month: 'long' })} Vardiya Takvimi</h2>
                            <table class="calendar">
                                <thead>
                                    <tr>
                                        <th>Pzt</th><th>Sal</th><th>Çar</th><th>Per</th><th>Cum</th><th>Cmt</th><th>Paz</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>`;
            
            const firstDayOfWeek = firstDayOfMonth.getDay();
            const startOffset = (firstDayOfWeek === 0) ? 6 : firstDayOfWeek - 1;
            
            for (let i = 0; i < startOffset; i++) {
                html += '<td></td>';
            }
            
            let currentDay = new Date(firstDayOfMonth);
            while (currentDay <= lastDayOfMonth) {
                const dayNumber = currentDay.getDate();
                const dayOfWeek = currentDay.getDay();
                
                if (dayOfWeek === 1 && dayNumber > 1) { // Pazartesi ve ilk gün değilse yeni satır
                    html += '</tr><tr>';
                }
                
                const result = getShiftForDate(startDate, startShift, holidayDay, currentDay);
                
                let cellClass = '';
                if (currentDay.toDateString() === new Date().toDateString()) {
                    cellClass += ' today';
                }
                if (dayOfWeek === holidayDay) {
                    cellClass += ' tatil-gunu';
                }
                
                let cellContent = dayNumber;
                if (result.status === 'tatil') {
                    cellContent += `<br><span class="tatil">T</span>`;
                } else if (result.status === 'calisma') {
                    cellContent += `<br><span class="vardiya-${result.shift}">${result.shift}</span>`;
                }
                
                html += `<td class="${cellClass.trim()}">${cellContent}</td>`;
                
                currentDay.setDate(currentDay.getDate() + 1);
            }
            
            const lastDayOfWeek = lastDayOfMonth.getDay();
            const endOffset = (lastDayOfWeek === 0) ? 0 : 7 - lastDayOfWeek;
            for (let i = 0; i < endOffset; i++) {
                html += '<td></td>';
            }
            
            html += `</tr></tbody></table>
                    <div style="margin-top: 15px;">
                        <p><span class="vardiya-1">1</span> = 1. Vardiya (00:00-08:00)</p>
                        <p><span class="vardiya-2">2</span> = 2. Vardiya (08:00-16:00)</p>
                        <p><span class="vardiya-3">3</span> = 3. Vardiya (16:00-24:00)</p>
                        <p><span class="tatil">T</span> = Tatil Günü</p>
                    </div>
                </div>`;
            
            document.getElementById('result-container').innerHTML = html;
        }
        
        /**
         * Tarih aralığı için vardiyaları listeler.
         */
        function showDateRange() {
            const startDate = new Date(document.getElementById('baslangic_tarihi').value);
            const startShift = parseInt(document.getElementById('baslangic_vardiya').value);
            const holidayDay = parseInt(document.getElementById('tatil_gunu').value);
            
            const rangeStart = new Date(document.getElementById('baslangic_aralik').value);
            const rangeEnd = new Date(document.getElementById('bitis_aralik').value);
            const showHolidays = document.getElementById('tatil_gunleri').checked;
            
            if (rangeEnd < rangeStart) {
                document.getElementById('result-container').innerHTML = '<div class="result"><h2>Hata</h2><p>Bitiş tarihi, başlangıç tarihinden sonra olmalıdır.</p></div>';
                return;
            }
            
            const diffInDays = Math.floor((rangeEnd - rangeStart) / (1000 * 60 * 60 * 24)) + 1;
            if (diffInDays > 60) {
                document.getElementById('result-container').innerHTML = '<div class="result"><h2>Hata</h2><p>Lütfen en fazla 60 günlük bir aralık seçin.</p></div>';
                return;
            }
            
            let html = `<div class="result">
                            <h2>Tarih Aralığı Vardiya Görünümü</h2>
                            <p><strong>${rangeStart.toLocaleDateString('tr-TR')} - ${rangeEnd.toLocaleDateString('tr-TR')}</strong> arasındaki vardiyalar:</p>
                            <ul class="date-range-list">`;
            
            let currentDate = new Date(rangeStart);
            while (currentDate <= rangeEnd) {
                const result = getShiftForDate(startDate, startShift, holidayDay, currentDate);
                
                if (!showHolidays && result.status === 'tatil') {
                    currentDate.setDate(currentDate.getDate() + 1);
                    continue;
                }
                
                const dayName = GUN_ADLARI[currentDate.getDay()];
                
                html += `<li class="date-range-item"><div>${currentDate.toLocaleDateString('tr-TR')} (${dayName})</div>`;
                
                if (result.status === 'tatil') {
                    html += `<div><span class="tatil">TATİL GÜNÜ</span></div>`;
                } else if (result.status === 'calisma') {
                    const shiftClass = `vardiya-${result.shift}`;
                    const shiftName = VARDİYA_ADLARI[result.shift];
                    html += `<div><span class="${shiftClass}">${shiftName}</span></div>`;
                }
                
                html += `</li>`;
                currentDate.setDate(currentDate.getDate() + 1);
            }
            
            html += `</ul></div>`;
            document.getElementById('result-container').innerHTML = html;
        }
        
        /**
         * Sekmeler arasında geçişi yönetir ve aktif sekmeyi korur.
         * @param {string} tabId Gösterilecek sekmenin ID'si.
         * @param {Event} event Tıklama olayı.
         */
        function showTab(tabId, event) {
            // Tüm sekmeleri gizle
            document.querySelectorAll('.tab-content').forEach(function(tab) {
                tab.classList.remove('active');
            });
            
            // Tüm sekme butonlarını pasif yap
            document.querySelectorAll('.tab').forEach(function(tab) {
                tab.classList.remove('active');
            });
            
            // Seçilen sekmeyi göster
            document.getElementById(tabId).classList.add('active');
            
            // Tıklanan sekme butonunu aktif yap
            if (event) {
                event.currentTarget.classList.add('active');
            }
            
            // Seçilen sekme bilgisini kaydet
            localStorage.setItem('activeTab', tabId);
        }
        
        // Form alanlarını varsayılan değerlerle doldur ve son aktif sekmeyi hatırla.
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date().toISOString().split('T')[0];
            const twoWeeksLater = new Date(new Date().setDate(new Date().getDate() + 14)).toISOString().split('T')[0];
            
            document.getElementById('baslangic_tarihi').value = today;
            document.getElementById('hedef_tarih').value = today;
            document.getElementById('takvim_ay').value = today.slice(0, 7);
            document.getElementById('baslangic_aralik').value = today;
            document.getElementById('bitis_aralik').value = twoWeeksLater;
            
            // Kayıtlı aktif sekmeyi yükle
            const activeTab = localStorage.getItem('activeTab') || 'gun-hesapla';
            document.querySelector('.tab.active').classList.remove('active');
            document.querySelector('.tab-content.active').classList.remove('active');
            
            document.getElementById(activeTab).classList.add('active');
            document.querySelector(`.tab[onclick*='${activeTab}']`).classList.add('active');
        });
    </script>
</body>
</html>
